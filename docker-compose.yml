version: '3.8'


volumes:
  postgres_data:
  certs:
    driver: local
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  kibanadata:
    driver: local
  logstashdata01:
    driver: local


networks:
  elastic:
    driver: bridge
    external: false


services:
  db:
    container_name: db
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.dev.db
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $POSTGRES_USER",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    container_name: web
    depends_on:
      db:
        condition: service_healthy
    build:
      context: ./app
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - /usr/src/app/
    ports:
      - 8000:8000
    env_file:
      - ./.env.dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python manage.py checkhealth",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  es_setup:
    container_name: es_setup
    depends_on:
      web:
        condition: service_healthy
    build:
      context: ./elastic_search/setup
      dockerfile: Dockerfile
      args:
        - STACK_VERSION=${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    env_file:
      - ./.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "[ -f config/certs/es01/es01.crt ]",
        ]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - elastic

  es_01:
    container_name: es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    depends_on:
      es_setup:
        condition: service_healthy
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic

  #  es_02:
    # container_name: es02
    # image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    # labels:
      # co.elastic.logs/module: elasticsearch
    # volumes:
      # - certs:/usr/share/elasticsearch/config/certs
      # - esdata02:/usr/share/elasticsearch/data
    # environment:
      # - node.name=es02
      # - cluster.name=${CLUSTER_NAME}
      # - discovery.seed_hosts=es01,es03
      # - cluster.initial_master_nodes=es01,es02,es03
      # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      # - bootstrap.memory_lock=true
      # - xpack.security.enabled=true
      # - xpack.security.http.ssl.enabled=true
      # - xpack.security.http.ssl.key=certs/es02/es02.key
      # - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      # - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.enabled=true
      # - xpack.security.transport.ssl.key=certs/es02/es02.key
      # - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      # - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.verification_mode=certificate
      # - xpack.license.self_generated.type=${LICENSE}
    # mem_limit: ${ES_MEM_LIMIT}
    # depends_on:
      # es_setup:
        # condition: service_healthy
    # ulimits:
      # memlock:
        # soft: -1
        # hard: -1
    # healthcheck:
      # test:
        # [
          # "CMD-SHELL",
          # "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        # ]
      # interval: 10s
      # timeout: 10s
      # retries: 120
    # networks:
      # - elastic
# 
  # es_03:
    # container_name: es03
    # image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    # labels:
      # co.elastic.logs/module: elasticsearch
    # volumes:
      # - certs:/usr/share/elasticsearch/config/certs
      # - esdata03:/usr/share/elasticsearch/data
    # environment:
      # - node.name=es03
      # - cluster.name=${CLUSTER_NAME}
      # - discovery.seed_hosts=es01,es02
      # - cluster.initial_master_nodes=es01,es02,es03
      # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      # - bootstrap.memory_lock=true
      # - xpack.security.enabled=true
      # - xpack.security.http.ssl.enabled=true
      # - xpack.security.http.ssl.key=certs/es03/es03.key
      # - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      # - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.enabled=true
      # - xpack.security.transport.ssl.key=certs/es03/es03.key
      # - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
      # - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.verification_mode=certificate
      # - xpack.license.self_generated.type=${LICENSE}
    # mem_limit: ${ES_MEM_LIMIT}
    # depends_on:
      # es_setup:
        # condition: service_healthy
    # ulimits:
      # memlock:
        # soft: -1
        # hard: -1
    # healthcheck:
      # test:
        # [
          # "CMD-SHELL",
          # "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        # ]
      # interval: 10s
      # timeout: 10s
      # retries: 120
    # networks:
      # - elastic

  kibana:
    container_name: kibana
    depends_on:
      es_01:
        condition: service_healthy
      # es_02:
        # condition: service_healthy
      # es_03:
        # condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic

  logstash_01:
    container_name: logstash01
    depends_on:
      es_01:
        condition: service_healthy
      # es_02:
        # condition: service_healthy
      # es_03:
        # condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
    networks:
      - elastic